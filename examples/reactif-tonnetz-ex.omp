; OM File Header - Saved 2018/12/23 13:47:16
; (6.080101 :patc (om-make-point 10 110) (om-make-point 502 35) (om-make-point 1068 1020) "" 183 0 nil "2018/12/23 13:46:04")
; End File Header
(in-package :om)(load-lib-for (quote ("reactif-lib" "Tonnetz")))(setf *om-current-persistent* (om-load-patch1 "reactif-tonnetz-ex" (quote ((let ((box (om-load-editor-box1 "TONNETZ" (quote |Tonnetz|:tonnetz) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "gens" (quote |Tonnetz|:ttoneleadi)) (om-load-inputfun (quote input-funbox) "" "chords" nil))) (om-make-point 559 882) (om-make-point 70 50) (if (find-class (quote |Tonnetz|:tonnetz) nil) (make-instance (quote |Tonnetz|:tonnetz) :gens (list nil nil nil nil nil nil) :chords nil :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 1456 712) (om-make-point 10 40))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote abstraction) "midievent2pitch" (om-load-patch-abs1 "midievent2pitch" (quote ((let ((box (om-load-boxcall (quote genfun) "OMIF" (quote omif) (quote ((om-load-inputfun (quote input-funbox) "IF" "TEST" nil) (om-load-inputfun (quote input-funbox) "THEN" "ACTION" nil))) (om-make-point 140 355) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM*" (quote om*) (quote ((om-load-inputfun (quote input-funbox) "number or list" "ARG1" 0) (om-load-inputfun (quote input-funbox) "number or list" "ARG2" 100))) (om-make-point 237 315) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote lispfun) "CAR" (quote car) (quote ((om-load-inputfun (quote input-funbox) "X" "X" nil))) (om-make-point 294 245) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "MIDIEVENT" (quote midievent) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "midi event type" "ev-type" (quote :keyon) (list (list "Note" (quote :note)) (list "KeyOn " (quote :keyon)) (list "KeyOff" (quote :keyoff)) (list "KeyPress" (quote :keypress)) (list "CtrlChange" (quote :ctrlchange)) (list "ProgChange" (quote :progchange)) (list "ChanPress" (quote :chanpress)) (list "PitchWheel/PitchBend" (quote :pitchbend)) (list "SongPos" (quote :songpos)) (list "SongSel" (quote :songsel)) (list "Clock" (quote :clock)) (list "Start" (quote :start)) (list "Continue" (quote :continue)) (list "Stop" (quote :stop)) (list "Tune" (quote :tune)) (list "ActiveSens" (quote :activesens)) (list "Reset" (quote :reset)) (list "SysEx" (quote :sysex)) (list "Stream" (quote :stream)) (list "Private" (quote :private)) (list "Process" (quote :process)) (list "DProcess" (quote :dprocess)) (list "QFrame" (quote :qframe)) (list "Ctrl14b" (quote :ctrl14b)) (list "NonRegParam" (quote :nonregparam)) (list "RegParam" (quote :regparam)) (list "SeqNum" (quote :seqnum)) (list "Textual" (quote :textual)) (list "Copyright" (quote :copyright)) (list "SeqName" (quote :seqname)) (list "InstrName" (quote :instrname)) (list "Lyric" (quote :lyric)) (list "Marker" (quote :marker)) (list "CuePoint" (quote :cuepoint)) (list "ChanPrefix" (quote :chanprefix)) (list "EndTrack" (quote :endtrack)) (list "Tempo" (quote :tempo)) (list "SMPTEOffset" (quote :smpteoffset)) (list "TimeSign" (quote :timesign)) (list "KeySign" (quote :keysign)) (list "Specific" (quote :specific)) (list "PortPrefix" (quote :portprefix)) (list "RcvAlarm" (quote :rcvalarm)) (list "ApplAlarm" (quote :applalarm)) (list "Reserved" (quote :reserved)) (list "dead" (quote :dead)))) (om-load-inputfun (quote input-funbox) "date" "ev-date" 0) (om-load-inputfun (quote input-funbox) "track" "ev-ref" 0) (om-load-inputfun (quote input-funbox) "port" "ev-port" 0) (om-load-inputfun (quote input-funbox) "channel" "ev-chan" 1) (om-load-inputfun (quote input-funbox) "event content" "ev-fields" nil))) (om-make-point 197 150) (om-make-point 125 75) (if (find-class (quote midievent) nil) (let ((newobj (make-instance (quote midievent) :ev-type (quote :keyon) :ev-date 0 :ev-ref 0 :ev-port 0 :ev-chan 1 :ev-fields (list 69 81) :from-file t))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj)) nil nil (pairlis (quote (scale show-stems cursor-mode obj-mode score-mode winpos winsize mode grillestep notechancolor? zoom player inport outport deltapict cmnpref staff fontsize approx)) (list nil (quote t) (quote :normal) 1 0 (om-make-point 400 20) (om-make-point 370 280) 0 1000 nil 1 (quote :midi-player) nil nil (om-make-point 0 0) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (quote g) 24 2)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (om-load-boxout "output" 0 (om-make-point 132 414) (quote ((om-load-inputfun (quote input-funbox) "" "out" nil))) nil nil) (om-load-boxin "input" 0 (om-make-point 135 31) "" nil nil nil))) (quote ((5 0 0 0 nil 0) (1 0 0 1 nil 0) (2 0 1 0 nil 0) (3 6 2 0 nil 0) (5 0 3 0 nil 0) (0 0 4 0 nil 0))) 6.080101 nil "" (om-make-point 200 200) (om-make-point 647 604)) (quote ((om-load-inputfun (quote input-funbox) "" "input" nil))) (om-make-point 262 298) nil (list nil) nil "midievent2pitch"))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote bastype) "aux 3" (quote t) (quote nil) (om-make-point 545 84) (om-make-point 84 30) (quote :ctrlchange) ":ctrlchange" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TEST-TYPE" (quote test-type) (quote ((om-load-inputfun (quote input-funbox) "a MidiEvent" "SELF" nil) (om-load-inputfunmenu1 (quote input-funmenu) "a MIDI event type" "TYPE" (quote :ctrlchange) (list (list "Note" (quote :note)) (list "KeyOn " (quote :keyon)) (list "KeyOff" (quote :keyoff)) (list "KeyPress" (quote :keypress)) (list "CtrlChange" (quote :ctrlchange)) (list "ProgChange" (quote :progchange)) (list "ChanPress" (quote :chanpress)) (list "PitchWheel/PitchBend" (quote :pitchbend)) (list "SongPos" (quote :songpos)) (list "SongSel" (quote :songsel)) (list "Clock" (quote :clock)) (list "Start" (quote :start)) (list "Continue" (quote :continue)) (list "Stop" (quote :stop)) (list "Tune" (quote :tune)) (list "ActiveSens" (quote :activesens)) (list "Reset" (quote :reset)) (list "SysEx" (quote :sysex)) (list "Stream" (quote :stream)) (list "Private" (quote :private)) (list "Process" (quote :process)) (list "DProcess" (quote :dprocess)) (list "QFrame" (quote :qframe)) (list "Ctrl14b" (quote :ctrl14b)) (list "NonRegParam" (quote :nonregparam)) (list "RegParam" (quote :regparam)) (list "SeqNum" (quote :seqnum)) (list "Textual" (quote :textual)) (list "Copyright" (quote :copyright)) (list "SeqName" (quote :seqname)) (list "InstrName" (quote :instrname)) (list "Lyric" (quote :lyric)) (list "Marker" (quote :marker)) (list "CuePoint" (quote :cuepoint)) (list "ChanPrefix" (quote :chanprefix)) (list "EndTrack" (quote :endtrack)) (list "Tempo" (quote :tempo)) (list "SMPTEOffset" (quote :smpteoffset)) (list "TimeSign" (quote :timesign)) (list "KeySign" (quote :keysign)) (list "Specific" (quote :specific)) (list "PortPrefix" (quote :portprefix)) (list "RcvAlarm" (quote :rcvalarm)) (list "ApplAlarm" (quote :applalarm)) (list "Reserved" (quote :reserved)) (list "dead" (quote :dead)))))) (om-make-point 509 114) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TIMED-COLL" (quote timed-coll) (quote ((om-load-inputfun (quote input-funbox) "" "IN" nil) (om-load-inputfun (quote input-funbox) "" "PUSH" nil) (om-load-inputfun (quote input-funbox) "" "INIT" nil) (om-load-inputfun (quote input-funbox) "" "DELTA" 100))) (om-make-point 562 410) nil nil nil nil 2))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 200)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 359 603) (om-make-point 310 91) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote nil) :lonset (quote (0)) :ldur (quote nil) :lvel (quote nil) :loffset (quote nil) :lchan (quote nil) :legato 0)))) (load-port-info newobj (quote nil)) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote nil)) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 22) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote genfun) "CHORDSEQ2T" (quote |Tonnetz|::chordseq2t) (quote ((om-load-inputfun (quote input-funbox) "" "CS" nil))) (om-make-point 526 783) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box) (let ((box (om-load-boxcall (quote bastype) "aux 2" (quote t) (quote nil) (om-make-point 439 64) (om-make-point 60 30) (quote :keyon) ":keyon" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TEST-TYPE" (quote test-type) (quote ((om-load-inputfun (quote input-funbox) "a MidiEvent" "SELF" nil) (om-load-inputfunmenu1 (quote input-funmenu) "a MIDI event type" "TYPE" (quote :keyon) (list (list "Note" (quote :note)) (list "KeyOn " (quote :keyon)) (list "KeyOff" (quote :keyoff)) (list "KeyPress" (quote :keypress)) (list "CtrlChange" (quote :ctrlchange)) (list "ProgChange" (quote :progchange)) (list "ChanPress" (quote :chanpress)) (list "PitchWheel/PitchBend" (quote :pitchbend)) (list "SongPos" (quote :songpos)) (list "SongSel" (quote :songsel)) (list "Clock" (quote :clock)) (list "Start" (quote :start)) (list "Continue" (quote :continue)) (list "Stop" (quote :stop)) (list "Tune" (quote :tune)) (list "ActiveSens" (quote :activesens)) (list "Reset" (quote :reset)) (list "SysEx" (quote :sysex)) (list "Stream" (quote :stream)) (list "Private" (quote :private)) (list "Process" (quote :process)) (list "DProcess" (quote :dprocess)) (list "QFrame" (quote :qframe)) (list "Ctrl14b" (quote :ctrl14b)) (list "NonRegParam" (quote :nonregparam)) (list "RegParam" (quote :regparam)) (list "SeqNum" (quote :seqnum)) (list "Textual" (quote :textual)) (list "Copyright" (quote :copyright)) (list "SeqName" (quote :seqname)) (list "InstrName" (quote :instrname)) (list "Lyric" (quote :lyric)) (list "Marker" (quote :marker)) (list "CuePoint" (quote :cuepoint)) (list "ChanPrefix" (quote :chanprefix)) (list "EndTrack" (quote :endtrack)) (list "Tempo" (quote :tempo)) (list "SMPTEOffset" (quote :smpteoffset)) (list "TimeSign" (quote :timesign)) (list "KeySign" (quote :keysign)) (list "Specific" (quote :specific)) (list "PortPrefix" (quote :portprefix)) (list "RcvAlarm" (quote :rcvalarm)) (list "ApplAlarm" (quote :applalarm)) (list "Reserved" (quote :reserved)) (list "dead" (quote :dead)))))) (om-make-point 400 107) nil nil "l" nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let* ((routebox (let ((box (om-load-boxcall (quote genfun) "ROUTE" (quote route) (quote ((om-load-inputfun (quote input-funbox) "" "MESSAGE" nil) (om-load-inputfun (quote input-funbox) "" "TESTS" nil) (om-load-inputfun (quote input-funbox) "" "TESTS" nil))) (om-make-point 354 208) (om-make-point 124 52) nil nil nil 3))) (when (fboundp (quote set-active)) (set-active box t)) box))) (setf (numouts routebox) 3) routebox) (let ((box (om-load-boxcall (quote genfun) "MIDI-IN" (quote midi-in) (quote ((om-load-inputfun (quote input-funbox) "port number" "PORT" 0) (om-load-inputfun (quote input-funbox) "incoming message processing patch" "MSG-PROCESSING-FUN" nil))) (om-make-point 280 91) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box t)) box))) (quote ((6 0 0 0 nil 0) (9 1 1 0 nil 0) (2 0 3 1 nil 0) (1 0 4 0 nil 0) (9 0 4 1 nil 0) (9 2 4 2 nil 0) (4 0 5 1 nil 0) (5 0 6 0 nil 0) (7 0 8 1 nil 0) (10 0 9 0 nil 0) (8 0 9 1 nil 0) (3 0 9 2 nil 0))) nil 6.080101))
