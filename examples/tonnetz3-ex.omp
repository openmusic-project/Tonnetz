; OM File Header - Saved 2018/12/23 14:07:33
; (6.1401 :patc (om-make-point 172 110) (om-make-point 696 318) (om-make-point 798 530) "" 183 0 nil "2018/12/23 14:07:33")
; End File Header
(in-package :om)(load-lib-for (quote ("Tonnetz")))(setf *om-current-persistent* (om-load-patch1 "tonnetz3-ex" (quote ((let ((box (om-load-boxcall (quote genfun) "TONNETZ2CS" (quote |Tonnetz|:tonnetz2cs) (quote ((om-load-inputfun (quote input-funbox) "Un Tonnetz" "TONN" nil))) (om-make-point 511 294) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ 2" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 532 392) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6900 6600 6200) (6600 6100 6900) (6900 6400 6100))) :lonset (quote (0 1000 2000 3000)) :ldur (quote ((1000 1000 1000) (1000 1000 1000) (1000 1000 1000))) :lvel (quote ((100 100 100) (100 100 100) (100 100 100))) :loffset (quote ((0 0 0) (0 0 0) (0 0 0))) :lchan (quote ((1 1 1) (1 1 1) (1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1401 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) nil nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 484 97) 0 1 (quote :normal) (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "TONNETZ-TRANSPOSE" (quote |Tonnetz|::tonnetz-transpose) (quote ((om-load-inputfun (quote input-funbox) "Un Tonnetz" "TONN" nil) (om-load-inputfunmenu1 (quote input-funmenu) "Le générateur selon lequel effectuer la transposition" "NGEN" 3 (list (list "1" 0) (list "2" 1) (list "3" 2) (list "4" 3) (list "5" 4) (list "6" 5))))) (om-make-point 163 287) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TONNETZ 2" (quote |Tonnetz|:tonnetz) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "tonnetz generator function" "gens" (quote |Tonnetz|:tstandardi) (list (list "Générateur standard" (quote |Tonnetz|:tstandardi)) (list "Générateur tonelead" (quote |Tonnetz|:ttoneleadi)))) (om-load-inputfun (quote input-funbox) "notes in the tonnetz (pitch class 0-11)" "chords" nil))) (om-make-point 130 363) (om-make-point 70 50) (if (find-class (quote |Tonnetz|:tonnetz) nil) (make-instance (quote |Tonnetz|:tonnetz) :gens (list nil nil nil nil nil nil) :chords (list (list 9 6 2) (list 6 1 9) (list 9 4 1)) :from-file t)) "x" nil (pairlis (quote (winsize winpos)) (list (om-make-point 771 566) (om-make-point 10 40))) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHORDSEQ2T" (quote |Tonnetz|:chordseq2t) (quote ((om-load-inputfun (quote input-funbox) "Un chord-seq" "CS" nil))) (om-make-point 161 100) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TONNETZ" (quote |Tonnetz|:tonnetz) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfunmenu1 (quote input-funmenu) "tonnetz generator function" "gens" (quote |Tonnetz|:tstandardi) (list (list "Générateur standard" (quote |Tonnetz|:tstandardi)) (list "Générateur tonelead" (quote |Tonnetz|:ttoneleadi)))) (om-load-inputfun (quote input-funbox) "notes in the tonnetz (pitch class 0-11)" "chords" nil))) (om-make-point 240 162) (om-make-point 70 50) (if (find-class (quote |Tonnetz|:tonnetz) nil) (make-instance (quote |Tonnetz|:tonnetz) :gens (list 3 4 7) :chords (list (list 0 9 5) (list 9 4 0) (list 0 7 4)) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 921 598) (om-make-point 496 187))) nil nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "CHORD-SEQ" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 137 0) (om-make-point 130 70) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6000 6900 6500) (6900 6400 6000) (6000 6700 6400))) :lonset (quote (0 375 819 1819)) :ldur (quote ((1000 1000 1000) (1000 1000 1000) (1000 1000 1000))) :lvel (quote ((100 100 100) (100 100 100) (80 80 80))) :loffset (quote ((0 0 0) (0 0 0) (0 0 0))) :lchan (quote ((1 1 1) (1 1 1) (1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1401 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((0) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1401 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((1) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1401 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((2) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1401 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 24 (quote g) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 1 nil 1000 0 (om-make-point 370 280) (om-make-point 400 22) 0 0 (quote :normal) (quote t) nil)) nil nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((3 0 0 0 nil 0) (0 0 1 0 nil 0) (5 0 2 0 nil 0) (2 0 3 0 nil 0) (6 0 4 0 nil 0) (4 0 5 0 nil 0))) nil 6.1401))