; OM File Header - Saved 2018/12/23 14:07:23
; (6.1401 :patc (om-make-point 10 10) (om-make-point 334 105) (om-make-point 965 1005) "" 183 0 "2018/12/23 14:04:58" "2018/12/23 14:07:23")
; End File Header
(in-package :om)(load-lib-for (quote ("Tonnetz")))(setf *om-current-persistent* (om-load-patch1 "visualisation" (quote ((let ((box (om-load-editor-box1 "MORENO" (quote chord-seq) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "pitches (mc): list or list of lists" "lmidic" (list 6000)) (om-load-inputfun (quote input-funbox) "onsets (ms): list" "lonset" (list 0 1000)) (om-load-inputfun (quote input-funbox) "durations (ms): list or list of lists" "ldur" (list 1000)) (om-load-inputfun (quote input-funbox) "velocities (0-127): list or list of lists" "lvel" (list 100)) (om-load-inputfun (quote input-funbox) "offsets (ms): list or list of lists" "loffset" (list 0)) (om-load-inputfun (quote input-funbox) "MIDI channels (1-16): list or list of lists" "lchan" (list 1)) (om-load-inputfun (quote input-funbox) "relative chords duration (0-100)" "legato" 0))) (om-make-point 213 48) (om-make-point 293 121) (let ((newobj (when (find-class (quote chord-seq) nil) (make-instance (quote chord-seq) :lmidic (quote ((6300 7700 4200) (7200 5800 9100) (5200 6100 7600) (6200 2100 4400) (5700 6400 6400 4000 5100))) :lonset (quote (-17 572 1061 1801 2424 3441)) :ldur (quote ((1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000) (1000 1000 1000 1000 1000))) :lvel (quote ((100 100 100) (100 100 100) (100 100 100) (100 100 100) (100 100 100 100 100))) :loffset (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0))) :lchan (quote ((1 1 1) (1 1 1) (1 1 1) (1 1 1) (1 1 1 1 1))) :legato 0)))) (load-port-info newobj (quote ((0 0 0) (0 0 0) (0 0 0) (0 0 0) (0 0 0 0 0)))) (init-mus-color newobj (quote nil)) (set-extra-pairs newobj (quote nil)) (set-patch-pairs newobj (quote ((nil (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1401 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((0) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1401 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((1) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1401 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((2) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1401 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((3) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1401 nil "" (om-make-point 200 200) (om-make-point 400 500))) ((4) (om-load-patch-abs1 "patch" (quote nil) (quote nil) 6.1401 nil "" (om-make-point 200 200) (om-make-point 400 500)))))) (set-name newobj nil) (set-tonalite newobj nil) newobj) "x" nil (pairlis (quote (approx fontsize staff cmnpref deltapict outport inport player zoom notechancolor? grillestep mode winsize winpos score-mode obj-mode cursor-mode show-stems scale)) (list 2 20 (quote gf) (let ((newobj (make-instance (quote edition-values)))) (setf (paper-size newobj) (om-make-point 600 800)) (setf (top-margin newobj) 2) (setf (left-margin newobj) 1) (setf (right-margin newobj) 1) (setf (bottom-margin newobj) 1) (setf (orientation newobj) nil) (setf (scale newobj) nil) (setf (system-space newobj) (quote (1))) (setf (system-color newobj) (quote nil)) (setf (line-space newobj) 1) (setf (title newobj) nil) (setf (show-title? newobj) nil) (setf (show-page? newobj) nil) (setf (sheet-id newobj) nil) (setf (page-mode newobj) nil) newobj) (om-make-point 0 0) nil nil (quote :midi-player) 99/100 nil 1000 0 (om-make-point 1844 405) (om-make-point 0 217) 0 1 (quote :normal) (quote t) nil)) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "LAST-N" (quote last-n) (quote ((om-load-inputfun (quote input-funbox) "a list" "LIST" nil) (om-load-inputfun (quote input-funbox) "number of elements" "N" 0))) (om-make-point 226 413) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote bastype) "aux" (quote t) (quote nil) (om-make-point 240 372) (om-make-point 27 30) 6 "6" nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "CHORD-SEQ2C" (quote chord-seq2c) (quote ((om-load-inputfun (quote input-funbox) "the chord-seq" "SELF" nil) (om-load-inputfun (quote input-funbox) "approx" "APPROX" 2))) (om-make-point 273 190) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "N-CERCLE" (quote n-cercle) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "n" 12) (om-load-inputfun (quote input-funbox) "" "puntos" (list 0 5 7)))) (om-make-point 292 257) (om-make-point 97 112) (if (find-class (quote n-cercle) nil) (make-instance (quote n-cercle) :n 12 :puntos (list (list 3 5 6) (list 0 7 10) (list 1 4) (list 2 8 9) (list 3 4 9)) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 295 274) (om-make-point 897 297))) t nil nil nil))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-boxcall (quote genfun) "OM-ABS" (quote om-abs) (quote ((om-load-inputfun (quote input-funbox) "number or tree" "SELF" 1))) (om-make-point 171 339) nil nil nil nil 1))) (when (fboundp (quote set-active)) (set-active box nil)) box) (let ((box (om-load-editor-box1 "TONNETZ" (quote |Tonnetz|:tonnetz) (quote ((om-load-inputfun (quote input-funbox) "object" "self" nil) (om-load-inputfun (quote input-funbox) "" "gens" (list 3 4 7)) (om-load-inputfun (quote input-funbox) "" "chords" nil))) (om-make-point 241 482) (om-make-point 73 73) (if (find-class (quote |Tonnetz|:tonnetz) nil) (make-instance (quote |Tonnetz|:tonnetz) :gens (list 3 4 7) :chords (list (list 3 5 6) (list 0 7 10) (list 1 4) (list 2 8 9) (list 3 4 9)) :from-file t)) nil nil (pairlis (quote (winsize winpos)) (list (om-make-point 570 432) (om-make-point 1051 62))) t nil nil t))) (when (fboundp (quote set-active)) (set-active box nil)) box))) (quote ((5 0 1 0 nil 0) (2 0 1 1 nil 0) (0 0 3 0 nil 0) (3 0 4 0 nil 0) (4 2 5 0 nil 0) (1 0 6 2 nil 0))) nil 6.1401))